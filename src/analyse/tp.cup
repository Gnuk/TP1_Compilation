/***********************************************************************************
* Copyright (C) 2013, Jeremy Marois, Maryam Pilvar, Anthony Rey
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
***********************************************************************************/

package analyse;

import java.util.*;
import java_cup.runtime.*;

/* inclusion du code */
parser code {:
	public void report_error(String message, Object info) {
	String m = "Erreur de syntaxe.";
	if (info instanceof Symbol) {
		Symbol s = ((Symbol) info); 
		if (s.left >= 0) /* Numéro de ligne */
			m = m + " ligne : " + (s.left+1);
		}
		System.out.println(m);
	}
	
:} ;

action code {:
	private static Boolean zero = false;
:} ;

/* symboles terminaux */
terminal PLUS, MOINS, MULT, DIVIDE, PAR_G, PAR_D, POINT_VIRGULE, MOD;
terminal UMINUS;
terminal Integer ENTIER;


/* non terminaux */
non terminal seq_expressions, expression;
non terminal Integer expr;

/* Precedences */
precedence left PLUS, MOINS;
precedence left MULT, DIVIDE, MOD;
precedence left UMINUS;

/* grammaire */
seq_expressions::= expression seq_expressions | expression ;

expression::= expr:e {: 
			if(!zero){
				System.out.println("Eval="+e.intValue());
			}else{
				System.out.println("Division par zero impossible");
				zero = false;
			} 
			:} POINT_VIRGULE | error POINT_VIRGULE ;

expr::=expr:e1 PLUS expr:e2 
	{: RESULT=new Integer(e1.intValue()+e2.intValue()); :} | 
		expr:e1 MOINS expr:e2 
	{: RESULT=new Integer(e1.intValue()-e2.intValue()); :} | 
		expr:e1 MULT expr:e2
	{: RESULT=new Integer(e1.intValue()*e2.intValue()); :} | 
		expr:e1 MOD expr:e2
	{: RESULT=new Integer(e1.intValue()%e2.intValue()); :} | 
		expr:e1 DIVIDE expr:e2 
	{: 
		if(e2.intValue() != 0){
			RESULT=new Integer(e1.intValue()/e2.intValue());
		}else{
			RESULT = 0;
			zero = true;
		}
	:} | 
		ENTIER:n {: RESULT=n; :} | 
		MOINS expr:e
	{: RESULT = new Integer(0 - e.intValue()); :}
	%prec UMINUS |
		PAR_G expr:e PAR_D {: RESULT=e; :};
